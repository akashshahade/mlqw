Final Algorithm Structure
Step 1: Preprocessing
Inputs:

Internal_Temp(t)
Ambient_Temp(t)
Î”IA(t)=InternalTemp(t)âˆ’Ambient Temp(t)

Check for:NaN, 0 â†’ Mark as invalid
Optional: Interpolate or skip

update thresholds
upper -
lower -

Derivatives
Î”T(t)= Î”IA(t)âˆ’Î”IA(tâˆ’1) /5

Second derivative (
â€‹
Spike Duration Logic
Maintain a spike counter:

If Î”IA > Upper for â‰¥ 3 readings â†’ Persistent Rise
If Î”IA > Upper only once â†’ Transient Spike

Thermal Load Index (TLI)
Numerical sum over Î”IA
TLI (w) = i=tâˆ’wâˆ‘tÎ”IA(i)



Step 7: Rolling Baseline Tracking




================================================================================================


### ðŸ”„ Final Adaptive Temperature Monitoring Algorithm â€“ Flowchart Style

---

#### ðŸŸ¦ Step 1: Input & Preprocessing

* Input: Internal\_Temp(t), Ambient\_Temp(t)
* Compute:

  * Î”IA(t) = Internal\_Temp - Ambient\_Temp
  * Validate: If NaN or 0 â†’ mark as invalid

---

#### ðŸŸ¨ Step 2: Rolling Statistics

* Windows: 1 Hour (12), 1 Day (288), 1 Week (2016)
* For each window:

  * Compute Rolling Mean (Î¼)
  * Compute Rolling Std Dev (Ïƒ)

---

#### ðŸŸ§ Step 3: Adaptive Thresholds (Ambient-linked)

* Upper\_Threshold = Ambient + Î¼ + Ïƒ
* Lower\_Threshold = Ambient + Î¼ - Ïƒ
* Optionally cap: Upper â‰¤ Ambient + 65

---

#### ðŸŸª Step 4: Derivatives

* First Derivative (Gradient):

  * Î”T(t) = Î”IA(t) - Î”IA(t-1)
* Second Derivative (Curvature):

  * Î”2T(t) = Î”IA(t) - 2Î”IA(t-1) + Î”IA(t-2)

---

#### ðŸŸ¥ Step 5: Spike Logic

* Maintain spike\_counter
* If Î”IA > Upper:

  * Increment spike\_counter
  * If spike\_counter â‰¥ 3 â†’ Critical Spike
* Else:

  * Reset spike\_counter

---

#### ðŸŸ© Step 6: Thermal Load Index (TLI)

* For each window:

  * TLI(w) = âˆ‘ Î”IA
  * Smooth using EWMA:

    * EWMA\_t = Î± â‹… x\_t + (1-Î±) â‹… EWMA\_{t-1}

---

#### ðŸŸ« Step 7: Long-Term Baseline

* Î”IA\_baseline = RollingMean(Î”IA over 1w)
* Drift = Î¼\_1d - Î”IA\_baseline
* If Drift > Ïƒ\_baseline â†’ Aging or Shift

---

#### ðŸŸ¨ Step 8: System State Classification

* **Stable:** Î”IA in range, low Î”T, low TLI
* **Warning:** Î”T > threshold, moderate TLI
* **Critical:** Î”IA > Upper, Î”2T > 0, TLI â†‘â†‘
* **Fault:** Î”IA = 0 or NaN, or Î”IA << Lower
* **Aging:** Î¼ drifting up slowly, high TLI\_1w

---

#### âœ… Output:

* System State per Window
* Optional Alerts (Warning/Critical/Fault)
* Trend Forecast (optional future Î”IA)















